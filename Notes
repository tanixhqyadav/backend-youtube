06
Project Setup : Youtube Backend + FrontEnd
Data Model Diagram for : https://app.eraser.io/workspace/YtPqZ1VogxGy1jzIDkzj
Models are decided on future scope 
setting up my project with github for further better with .gitkeep and .gitignore and all the valid stuff 

i have genrated a gitignore file via https://mrkandreev.name/snippets/gitignore-generator/#Node

dev dependicies  These are packages needed only for development purposes, such as testing, transpiling, or linting installed nodemon 
dependicies : These are the core packages your project needs to run in production. 
some of the folders created such as in src
*controllers this folder will have funcanilities
*db database connectivity code and othe stuff
*middleware code which you need to run in between request and response cycle for confriguation 
*models conatins the schema and structure 
*routes all the routing stuff
*utils utiliety : file upload is utility which you will require at many places such as profile photo ....etc  can be said funcnalities used at amy places can be put under utlis

intalled pretteir for better visbilty and not for the conflicts with some changes and folder to be done manully (to be done with prettier {prettier.rc : a overall configuration for the team to maitain code structure and pretteier.ignore for not touch these files with your syntaxial issue})

07
DataBase Connection
using mongodb atlas here they provide a sub-service where they provide online database
Database connection can be done using two ways  
put it in the index file and then add funcantities to connect 
or put the connetivity code in other foler and then import it to index to make teh code clean and organised
Requiring to pacakges dotenv beacuse of env variables connection and mongooes express
database ke liye 2 things to keep in mind
1> its imp to keep things in try and catch or else promises when ever talking with database
2> database is always in another continent so use which require time and for this we should use asynac and  await  

08
code setup and custom error classes , a little bit of middle ware, custom api classes\
in Express we majorly changes works on request and response 
url se jab koi data ata hai toh use req.params, req.body : alag alaga trh se data aa skta hai forms , json , 
pacakage : cookie parser    , and cors
app.use() is used while using middleware setting or else doing confriguation stuff 
cors stands for Cross origin resource sharing 
data comes with many things url , json , form which require some setting to configure data
url has its encoder to encode the special character

cookies are the small chunks of data , which are stored , updated or deleted , maintained while  browsing website
When you visit a website, it may store a cookie on your device containing information like your login status or preferences. When you revisit the site, your browser sends this cookie back to the server,

Middleware in Express (and other web frameworks) acts as a “gate” or checkpoint in the request-response cycle. It intercepts incoming HTTP requests before they reach the main route handlers, allowing you to add checks, transformations, or modifications to the request., we can use multiple middle ware
it comprises of (err, req, res, next) next is about middleware, it is like a flag or else we can switch between middle ware 

we need to talk with the database always two thing in mind(async awiat and try catch) , so what we can do , we can make it util , a genrilsed function for that  i am making a async handler in utlis 

res.status(code) sets the response status code and then allows you to chain other methods, like res.json() or res.send(), to send the response data to the client.
!server has some status code 
Informational responses (100 – 199)
Successful responses (200 – 299)
Redirection messages (300 – 399)
Client error responses (400 – 499)
Server error responses (500 – 599)
Here are some common status codes:

200 - OK: Indicates that the request was successful.
201 - Created: Used when a new resource has been created successfully, like after a POST request.
400 - Bad Request: Sent when there’s an issue with the client’s request, like invalid input.
401 - Unauthorized: Indicates that authentication is needed or failed.
404 - Not Found: Used when the requested resource doesn’t exist on the server.
500 - Internal Server Error: Signifies a server-side error

.next() via eaxmple
app.use((req, res, next) => {
    console.log('First middleware');
    next(); // move to the next middleware
});

app.use((req, res, next) => {
    console.log('Second middleware');
    next(); // move to the next middleware
});

app.get('/', (req, res) => {
    res.send('Hello, world!'); // sends the response, ending the cycle
}); next() is used to pass control from one middleware to the next

Now for standarding error  node js provides a class error so we are overriding eror and controls in utils to handle all the error 
in a standard way with status code, message etc....
same done for Api response

09 data modeling ,user model , daily pulgin  in video model, JWT (javascript web Tokens) ,becript , 

data in mongodb is stored in BSON format , (B json ) B stands for binary which allows it to handle complex, hierarchical data structures, here in user model , avtar and image url are stored on a third party service ,
history is tracked jese he we will watch video toh video ki array mein push kar denge video , 

JWT (JSON Web Token) and refresh tokens are commonly used for user authentication and session management.
JSON Web Tokens (JWTs) are a compact, URL-safe way of securely transmitting information between parties as a JSON object. They’re often used for authentication and authorization in web applications, allowing the backend to verify that a user is authenticated without storing session data.
// !JWTs have three parts: Header, Payload, and Signature. The payload contains the user claims, while the 
// !signature verifies the token’s authenticity.
Usage: Once a user logs in, the server generates a JWT and sends it back to the client. This token is stored on the client side (e.g., in local storage or a cookie). For subsequent requests, the client includes the JWT in the headers (often as a Bearer token in the Authorization header), allowing the server to verify the user’s identity without re-authenticating.

refresh token  :A refresh token is a long-lived token that is used to obtain a new JWT when the original JWT expires.
Usage: Since JWTs are usually short-lived (for security), they expire relatively quickly (e.g., in 15-30 minutes). When a JWT expires, the user would typically be logged out unless there’s a way to refresh the session. This is where the refresh token comes in. It’s stored securely and sent to the backend to generate a new JWT without requiring the user to re-authenticate.

!!! to maintain watch history is not a easy task, so we are diiffrent package to work like moongos . aggragate . paginative-v2
Mongoose's aggregate framework provides a powerful way to perform data aggregation operations directly on MongoDB collections. The aggregation framework allows for complex data manipulations, transformations, and computations on your MongoDB documents, beyond simple find and filter queries. In Mongoose, it can be used with the .aggregate() method to execute MongoDB aggregation pipelines.
 const result = await Order.aggregate([
  { $match: { status: "completed" } }, // Filters for completed orders
  { $group: { _id: "$category", totalAmount: { $sum: "$amount" } } }, // Groups by category and calculates total amount
  { $sort: { totalAmount: -1 } } // Sorts by total amount in descending order
]);
Filters only documents with "completed" status.
Groups them by the category field and calculates the total of amount.
Sorts the categories by totalAmount in descending order.
a use of in above
plugin :
A Mongoose plugin is essentially a reusable piece of code that can be applied to one or more Mongoose schemas to add specific functionalities or behaviors. Plugins help in maintaining DRY (Don't Repeat Yourself) principles by allowing you to abstract and reuse common schema features across different models.

more pacakages
bcrypt or brcyptjs and jwt
bcrypt is used for hashing the password , is a security technique used to protect passwords by converting them into a fixed-length string of characters (known as a "hash") that is unique to the original password

Direct enryption is not possible so we need some mongoose hooks for this purpose 
a pre-hook is a type of middleware that allows you to run specific functions before certain actions, such as saving, updating, or deleting documents in a collection
Basically concpet that is ki hum log sessin krte hai means we use webiste , and then jwt are shortlived or else can be said 
as temp variable which are used for authrization pasword checking nad these stuff , where else  the refresh tokens are 
used for long sesion reauth and session managment these are stored in database

10 file upload and multer 
express does not have file handling capablities , we need to configure mltiple things and most of the time filehandling 
is not done on our own server it done on 3rd party api and server 
file upload is basically a utility function and same concept is used in image uplo, ,video, pdf, etc....

here we are using a service Cloudniary when ever we upload file 2 packages are used  multer or express file upload
what cloudinary do ,it takes the file from user and upload it to its service 
what we are doing here is we are uploading file through multer we will temproarliy keep the file to our local server, and then 
by using cloudinary we will take the file from local server and kep that file  to servide 
in proudction we also the above pratise to if any problem arise then for reupoad 
fs is node js file system which comes by default and allow to perform many funcanalities including crud
we are using multer and making fileupload  middleware   
what is actually done 

Local Upload:

The multer middleware saves the uploaded file temporarily in a local directory (./public/temp) on the server.
This directory serves as a temporary storage location, ensuring the file is accessible while the backend prepares to upload it to Cloudinary.
Cloudinary Upload:

The uploadOnCloudinary function takes the local file path as input and uses Cloudinary’s API to upload the file.
Cloudinary’s resource_type: "auto" option lets it auto-detect the type of file (e.g., image, video, etc.).
File Removal:

After successfully uploading the file to Cloudinary, the fs.unlinkSync method deletes the local file to save space and improve security.
If an error occurs during the Cloudinary upload, the catch block also removes the file to prevent any leftover temporary files on the server.
Returning the Cloudinary Response:

Once the file is on Cloudinary, the function returns the response, which includes details such as the file URL on Cloudinary.

11
HTTP HYPER TEXT TRANSFER PROTOCOL 
THE DIFFRENCE BETWEEEN http and https is all anout security concern https is more secure the data sent in encrypted way 
URL URI URN ALL ARE SAME BUT names are given  UNIFORM RESOURCE LOCATOR 
http headers is the data about the data which is called metadata, it is basically keyvalue pair with request and response both 
it is used for caching , authentication , state management
request header > client  
response header > server
represantation header> encoding 
payload headers>data

https methods 
>Get : retrive a resource 
>Head: no message body
>Options:what options are avialable 
>Trace:loop back test
>Delete: remove a resource 
>Put: replace a resource 
>Post: intreact with resource 
>Patch: change part of a resource 
 HTTPS (or HTTP over SSL/TLS) is a fundamental protocol that ensures secure communication between the frontend and backend. It plays a critical role in protecting data integrity, confidentiality, and authenticity. HTTP methods like GET, POST, DELETE, PATCH, PUT, TRACE, and OPTIONS are essential tools for interacting with resources on a server. Here's a breakdown:

HTTPS as a Communication Layer:

HTTPS ensures secure data exchange by encrypting the communication using SSL/TLS. This prevents sensitive data like user credentials or API keys from being intercepted.
HTTP Methods for Interaction:

GET: Retrieve data from the server (e.g., fetching user details).
POST: Send data to the server to create a new resource (e.g., submitting a form).
PUT: Update an entire resource on the server.
PATCH: Update a part of a resource on the server.
DELETE: Remove a resource from the server.
OPTIONS: Check which HTTP methods are supported by the server.
TRACE: Debug and trace the route a request takes to the server.
HTTP Headers:

Headers like Content-Type, Authorization, Accept, and User-Agent facilitate communication by providing metadata about the request or response.
Front-End and Back-End Communication:

The frontend (client-side) sends HTTP requests to interact with the backend (server-side), which processes these requests and sends back responses, often in formats like JSON or XML.
A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. REST is a widely used architectural style that allows communication between a client (frontend) and a server (backend) over HTTP, using standard methods like GET, POST, PUT, DELETE, and others.

A REST API (Representational State Transfer Application Programming Interface) is a set of rules and conventions for building and interacting with web services. REST is a widely used architectural style that allows communication between a client (frontend) and a server (backend) over HTTP, using standard methods like GET, POST, PUT, DELETE, and others.

Key Concepts of REST API:
Resource-Based Architecture:

In REST, everything is a resource. Resources are typically represented by URLs (Uniform Resource Locators).
Example:
/users – Represents a collection of users.
/users/123 – Represents a specific user with ID 123.
Stateless Communication:

Each request from the client to the server must contain all the information the server needs to fulfill it. The server does not retain any session information about the client between requests.
HTTP Methods: RESTful APIs use standard HTTP methods to perform operations on resources:

GET: Retrieve a resource.
POST: Create a new resource.
PUT: Update an existing resource entirely.
PATCH: Update part of a resource.
DELETE: Remove a resource.
HTTP Status Codes: REST APIs use standard HTTP status codes to indicate the result of a request:

200 OK – Request was successful.
201 Created – A resource was successfully created.
400 Bad Request – The client sent an invalid request.
401 Unauthorized – Authentication is required.
404 Not Found – The requested resource does not exist.
500 Internal Server Error – The server encountered an error.
Representation of Resources:

Resources are typically represented in a format like JSON, XML, or even plain text.
Example of JSON response for a user resource:
json
Copy code
{
  "id": 123,
  "name": "John Doe",
  "email": "johndoe@example.com"
}
Uniform Interface:

REST APIs adhere to a uniform set of rules for how resources are defined and accessed, making it easier to work with different APIs.
Benefits of REST APIs:
Scalability: Statelessness allows REST APIs to scale easily.
Flexibility: Works with multiple data formats (JSON, XML, etc.).
Interoperability: REST APIs can be used across various platforms and programming languages.
Simplicity: REST is easy to understand and implement.
How REST APIs Work:
The client (e.g., a frontend application) sends an HTTP request to the server.
The server processes the request and interacts with a database or service to fetch or manipulate data.
The server sends an HTTP response back to the client, often including data in JSON or XML format.
Example:
Request:

http
Copy code
GET /users/123 HTTP/1.1
Host: api.example.com
Accept: application/json
Response:

json
Copy code
{
  "id": 123,
  "name": "John Doe",
  "email": "johndoe@example.com"
}

How REST APIs Work:
The client (e.g., a frontend application) sends an HTTP request to the server.
The server processes the request and interacts with a database or service to fetch or manipulate data.
The server sends an HTTP response back to the client, often including data in JSON or XML format.


12
logic building and register ?? Controller and logics 
here we are writing logics and controller part , now we are writing logic as written in register in controller and now
we are creating routes when we hit the url then method should run 
we can do that while hitting the register user we can hit that route but what we do generally is that we declare routes
, we can use app.get in writing register route but we are using middle ware to write routes and routers   
we can use a plugin of vs code thunder client for better 
Postman and Thunder Client are both tools commonly used for testing and interacting with APIs (Application Programming Interfaces).
use postman for api checking and routes 